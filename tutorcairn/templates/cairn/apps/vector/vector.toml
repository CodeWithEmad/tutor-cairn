# Vector's API for introspection
[api]
enabled = true
address = "127.0.0.1:8686"

### Sources

# Capture logs from all containers
[sources.docker_logs]
type = "docker_logs"
[sources.kubernetes_logs]
type = "kubernetes_logs"

### Transforms

# Select lms & cms containers
[transforms.openedx_docker_containers]
type = "filter"
inputs = ["docker_logs"]
condition = 'includes(["lms", "cms"], .label."com.docker.compose.service")'
[transforms.openedx_kubernetes_containers]
type = "filter"
inputs = ["docker_logs", "kubernetes_logs"]
condition = '.kubernetes.pod_namespace == "{{ K8S_NAMESPACE }}" && includes(["lms", "cms"], .kubernetes.container_name)'

# Parse tracking logs: extract time
[transforms.tracking]
type = "remap"
inputs = ["openedx_docker_containers", "openedx_kubernetes_containers"]
# Time formats: https://docs.rs/chrono/0.4.19/chrono/format/strftime/index.html#specifiers
source = '''
parsed, err_regex = parse_regex(.message, r'^.* \[tracking\] [^{}]* (?P<tracking_message>\{.*\})$')
if err_regex != null {
  abort
}
message = parsed.tracking_message
parsed_json, err_json = parse_json(parsed.tracking_message)
if err_json != null {
  log("Unable to parse JSON from tracking log message: " + err_json, level: "error")
  abort
}
time, err_timestamp = parse_timestamp(parsed_json.time, "%+")
if err_timestamp != null {
  log("Unable to parse timestamp from tracking log message: " + err_timestamp, level: "error")
  abort
}
. = {"time": time, "message": message}
'''
drop_on_error = true
drop_on_abort = true

[transforms.tracking_debug]
type = "remap"
inputs = ["tracking"]
# Time formats: https://docs.rs/chrono/0.4.19/chrono/format/strftime/index.html#specifiers
source = '''
.message = parse_json!(.message)
'''

### Sinks

# Log all events to stdout, for debugging
[sinks.out]
type = "console"
inputs = ["openedx_kubernetes_containers"]
# inputs = ["tracking_debug"]
encoding.codec = "json"
# encoding.only_fields = ["time", "message.context.course_id", "message.context.user_id", "message.name"]

# # Send logs to clickhouse
[sinks.clickhouse]
type = "clickhouse"
# Required: https://github.com/timberio/vector/issues/5797
encoding.timestamp_format = "unix"
inputs = ["tracking"]
endpoint = "{{ CAIRN_CLICKHOUSE_HTTP_SCHEME }}://{{ CAIRN_CLICKHOUSE_HOST }}:{{ CAIRN_CLICKHOUSE_HTTP_PORT }}"
database = "{{ CAIRN_CLICKHOUSE_DATABASE }}"
table = "_tracking"
healthcheck = true

{{ patch("cairn-vector-toml") }}
